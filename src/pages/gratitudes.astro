---
import { Image } from "astro:assets";
import type { ImageMetadata } from 'astro';
import BaseLayout from '@/layouts/BaseLayout.astro';
import { getCollection } from 'astro:content';

const titleShort = ":)";
const titleFull = "thank you, world";

const gratitudes = await getCollection('gratitudes');
const gratitudeItems = gratitudes.map(g => g.data);

// Sort newest relevant_date
gratitudeItems.sort((a, b) =>
  (new Date(b.relevant_date) > new Date(a.relevant_date) ? 1 : -1)
);

function formatDate(date: Date): string {
  const newDate = new Date(date);
  const year = newDate.getFullYear();
  const month = String(newDate.getMonth() + 1).padStart(2, '0');
  const day = String(newDate.getDate()).padStart(2, '0');
  return `${year}/${month}/${day}`;
}

// Import images if present using Astro V4 dynamic asset import
const imageImports = import.meta.glob<{ default: ImageMetadata }>("../content/300-collections/gratitudes/images/*");

const itemsWithImageImports = await Promise.all(
  gratitudeItems.map(async item => {
    let imgSrc = null;
    if (item.image) {
      // item.image: '../images/filename.png'
      // Remove '../images/' prefix â€“ get IMAGE FILENAME
      const imageFileName = item.image.replace(/^\.\.\/images\//, '');
      // Build the glob key: it must match exactly as the key in imageImports
      const globKey = `../content/300-collections/gratitudes/images/${imageFileName}`;
      if (imageImports[globKey]) {
        imgSrc = (await imageImports[globKey]()).default;
      } else {
        console.warn('Image not found via import.meta.glob mapping:', globKey);
      }
    }
    return { ...item, imgSrc };
  })
);

---

<BaseLayout titleShort={titleShort} titleFull={titleFull}>
  <p class="pb-6 text-content-1 text-center">(smile-inducing, gratitude-provoking, and otherwise noteworthy moments)</p>

  <div class="grid max-w-9/10 grid-cols-2 gap-4 md:max-w-3/4 md:grid-cols-3 lg:grid-cols-4">
    {itemsWithImageImports.map((item, index) => (
      <div class={`overflow-hidden rounded-xl ${item.imgSrc
        ? 'row-span-2 max-h-80'
        : 'flex flex-col justify-between bg-surface-2 hover:bg-surface-3 soft-transition'}`}>
        {item.imgSrc ? (
          <div class="relative h-full group">
            <Image src={item.imgSrc} alt={item.redacted_content} loading={index < 20 ? "eager" : "lazy"} class="object-cover w-full h-full" />
            <div class="absolute inset-0 flex items-center justify-center bg-content-0 opacity-0 hover:opacity-80 soft-transition">
              <p class="p-4 text-base font-semibold text-center text-content-4 opacity-0 group-hover:opacity-100 soft-transition lowercase text-ellipsis">{item.redacted_content}</p>
            </div>
            <p class="absolute bottom-2 right-2 px-2 py-1 text-base font-mono font-semibold text-content-1">
              {formatDate(item.relevant_date)}
            </p>
          </div>
        ) : (
          <div class="flex items-center justify-center flex-grow p-4">
            <p class="text-base font-light text-center text-content-2 group-hover:text-content-0 soft-transition text-ellipsis lowercase">{item.redacted_content}</p>
          </div>
        )}
        <p class="px-2 py-2 text-base text-right font-mono font-semibold text-content-3">
          {formatDate(item.relevant_date)}
        </p>
      </div>
    ))}
  </div>
</BaseLayout>
