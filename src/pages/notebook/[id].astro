---
// pages/media/[id].astro
import { getCollection, render, type CollectionEntry } from 'astro:content';
import BaseLayout from '@/layouts/BaseLayout.astro';
import NotebookInfo from '@/components/NotebookInfo.astro'
import  { type HeadingHierarchy } from "@/components/TOCHeading.astro";
import TOCHeading from "@/components/TOCHeading.astro";
import { createHeadingHierarchy } from '@/utils/toc-helpers';
import { renderMarkdownWithRewriters } from '@/utils/markdown-render';
import { imageRewriterFromMap, getBaseSlugMap, linkRewriterFromBaseSlugMap, walkImages, buildImageMap } from '@/utils/markdown-rewriters';

export const prerender = true;

// 1. Generate a new path for every collection entry
export async function getStaticPaths() {
  const notebook = await getCollection('notebook');

  return notebook.map(notebookEntry => ({
    params: { id: notebookEntry.id },
    props: { notebookEntry }
  }));
}

// 2. Get the entry directly from the prop
type Props = {
  notebookEntry: CollectionEntry<'notebook'>;
}
const { notebookEntry } = Astro.props;

// 2.5 Rewrite markdown links
const markdown = notebookEntry.body ?? '';
const collections = ['notebook', 'media'];
const currentRoute = `/notebook/${notebookEntry.id}`;

// Build image map (sync or async, depending on your setup)
const imagePaths = await walkImages('public');
const imageMap = buildImageMap(imagePaths);

// Build slug map for page links
const slugMap = await getBaseSlugMap(collections);

// Init rewriters:
const imageRewriter = imageRewriterFromMap(imageMap);
const linkRewriter = linkRewriterFromBaseSlugMap(slugMap);

// Render!
const { html, headings } = await renderMarkdownWithRewriters(markdown, {
  imageRewriter,
  linkRewriter,
});

//const { Content, headings } = await render(notebookEntry);

// 3. Set up TOC
const toc: HeadingHierarchy[] = createHeadingHierarchy(headings ?? []);
const hasToC = toc.length > 1;

---

<BaseLayout titleShort={notebookEntry.data.title}>

  <section class={`md:grid md:grid-cols-4 ${hasToC ? "mx-auto max-w-7xl" : ""}`}>
    {hasToC && (
      <div class="relative mx-auto px-4 xl:pt-10 2xl:px-0">
        <nav class="md:sticky md:top-20">
          <ul>
            {toc.map((heading) => (
              <TOCHeading heading={heading} />
            ))}
          </ul>
        </nav>
      </div>
    )}
    
    <article class={`mx-auto py-10 items-center ${hasToC ? "md:col-span-3" : "md:col-span-4 max-w-6/7"}`}>
     
      <div class=`justify-center mb-10 flex ${hasToC ? "w-full" : ""}`>
        <NotebookInfo notebookEntry={notebookEntry} />
      </div>

      <div class="markdown-content px-8 md:px-4" set:html={html}></div>

    </article>
  </section>
</BaseLayout>


<script>
  // Array of heading IDs in order (slugs from your headings)
  const headingIds = [...document.querySelectorAll('.markdown-content h2, .markdown-content h3, .markdown-content h4')].map(e => e.id);

  function highlightClosestHeading() {
    // Find which heading is nearest to the top of viewport
    let closest;
    let min = Infinity;
    headingIds.forEach(id => {
      const el = document.getElementById(id);
      if (el) {
        const rect = el.getBoundingClientRect();
        if (rect.top >= 0 && rect.top < min) {
          min = rect.top;
          closest = id;
        }
      }
    });
    // Remove active from all
    document.querySelectorAll('.toc-active').forEach(el => el.classList.remove('toc-active'));
    // Add active to closest
    if (closest) {
      const activeLink = document.getElementById(`toc-link-${closest}`);
      if (activeLink) {
        activeLink.classList.add('toc-active');
      }
    }
  }
  window.addEventListener('scroll', highlightClosestHeading, { passive: true });
  window.addEventListener('DOMContentLoaded', highlightClosestHeading);

  // --- Your image resizing logic ---
  window.addEventListener('DOMContentLoaded', () => {
    document.querySelectorAll('.markdown-content img[alt]').forEach(img => {
      const alt = img.getAttribute('alt');
      if (alt && /^\d+$/.test(alt)) {
        (img as HTMLImageElement).style.maxWidth = `${alt}px`;
        (img as HTMLImageElement).style.height = 'auto';
      }
    });
  });
</script>