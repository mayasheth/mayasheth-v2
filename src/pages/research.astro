---
import BaseLayout from '@/layouts/BaseLayout.astro';
import ResearchArticle from '@/components/ResearchArticle'
import { getCollection, type CollectionEntry } from 'astro:content';

const title = "research";

// load research collection and sort by descending date
const research = (await getCollection('research')).sort((a, b) => {
  return (new Date(b.data.date_published) > new Date(a.data.date_published) ? 1 : -1)
});

// get unique years and sort ascending, convert to string and add "selected"
const groups = [...new Set(research.flatMap(r => r.data.date_published.getFullYear().toString() || []))].sort().concat(['selected'])

const groupedResearch: Record<string, CollectionEntry<'research'>[]> = groups.reduce(
  (acc: Record<string, CollectionEntry<'research'>[]>, group: string) => {
    acc[group] = [];
    return acc;
  },
  {}
);

for (const entry of research) {
  const group = entry.data.selected ? "selected" : entry.data.date_published.getFullYear().toString();
  if (groupedResearch[group]) {
    groupedResearch[group].push(entry);
  }
}

---

<BaseLayout titleShort={title} titleFull={title}>
  <p class="pb-6 markdown-content flex flex-col text-center"> 
    <a href="https://scholar.google.com/citations?user=IvQzJqIAAAAJ&hl=en" target="_blank"> google scholar </a>
    <span class="text-content-2">(asterisks & carets indicate authors with equal contribution)</span>
  </p>  

  {groups.slice().reverse().map(group => (
    groupedResearch[group].length > 0 && (
      <section class="max-w-5/6 md:max-w-4/5 lg:max-w-3/5" id={group}>
          <hr class="w-full h-px mt-4 mb-2 border-content-4 border-t-1"/>
          <h2 class="text-right text-content-4">{group}</h2>
          <div class="flex flex-col gap-4">
            {groupedResearch[group].map(r => (
              <ResearchArticle client:load article={r.data} />
            ))}
          </div>
      </section>
    )
))}

</BaseLayout>
